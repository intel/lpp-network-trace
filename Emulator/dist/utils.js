/*
* Copyright (C) 2020 Intel Corporation.
*
* This program is free software; you can redistribute it and/or modify it
* under the terms and conditions of the GNU General Public License,
* version 2, as published by the Free Software Foundation.
*
* This program is distributed in the hope it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
* more details.
*/


/**
 *  Assert
 *
 * @param {Object} condition - condition
 * @param {Object} message - message
 * @return {undefined}
 */
function assert(condition, message) {
  if (!condition) {
    message = message || 'Assertion failed';
    if (typeof Error !== 'undefined') {
      throw new Error(message);
    }
    throw message; // Fallback
  }
}
/**
 *  Retrun string' length
 *
 * @param {String} String - condition
 * @return {Object} length - length
 */
function ucs2length(str) {
  let length = 0;
  const len = str.length;
  let pos = 0;
  let value;
  while (pos < len) {
    length++;
    value = str.charCodeAt(pos++);
    if (value >= 0xD800 && value <= 0xDBFF && pos < len) {
      // high surrogate, and there is a next character
      value = str.charCodeAt(pos);
      if ((value & 0xFC00) == 0xDC00) pos++; // low surrogate
    }
  }
  return length;
}

function equal(a, b) {
  return JSON.stringify(a) === JSON.stringify(b);
}


//* *******validate is pregenerated by ajv-cli https://www.npmjs.com/package/ajv-cli (MIT)
const validate = (function() {
  const pattern0 = new RegExp('^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]{3})?(?:Z|[+-][01][0-9]:[0-5][0-9])?$');
  const refVal = [];
  return function validate(data, dataPath, parentData, parentDataProperty, rootData) {
    /* # sourceURL=http://example.com/product.schema.json */
    let vErrors = null;
    let errors = 0;
    if ((data && typeof data === 'object' && !Array.isArray(data))) {
      if (true) {
        const errs__0 = errors;
        var valid1 = true;
        var data1 = data.version;
        if (data1 === undefined) {
          valid1 = false;
          validate.errors = [{
            keyword: 'required',
            dataPath: `${dataPath || ''}`,
            schemaPath: '#/required',
            params: {
              missingProperty: 'version',
            },
            message: 'should have required property \'version\'',
          }];
          return false;
        }
        var errs_1 = errors;
        if ((typeof data1 !== 'number' || (data1 % 1) || data1 !== data1)) {
          validate.errors = [{
            keyword: 'type',
            dataPath: `${dataPath || ''}.version`,
            schemaPath: '#/properties/version/type',
            params: {
              type: 'integer',
            },
            message: 'should be integer',
          }];
          return false;
        }
        const schema1 = validate.schema.properties.version.enum;
        var valid1;
        valid1 = false;
        for (var i1 = 0; i1 < schema1.length; i1++) {
          if (equal(data1, schema1[i1])) {
            valid1 = true;
            break;
          }
        } if (!valid1) {
          validate.errors = [{
            keyword: 'enum',
            dataPath: `${dataPath || ''}.version`,
            schemaPath: '#/properties/version/enum',
            params: {
              allowedValues: schema1,
            },
            message: 'should be equal to one of the allowed values',
          }];
          return false;
        }
        var valid1 = errors === errs_1;

        if (valid1) {
          var data1 = data.description;
          if (data1 === undefined) {
            valid1 = false;
            validate.errors = [{
              keyword: 'required',
              dataPath: `${dataPath || ''}`,
              schemaPath: '#/required',
              params: {
                missingProperty: 'description',
              },
              message: 'should have required property \'description\'',
            }];
            return false;
          }
          var errs_1 = errors;
          if (typeof data1 === 'string') {
            if (ucs2length(data1) > 256) {
              validate.errors = [{
                keyword: 'maxLength',
                dataPath: `${dataPath || ''}.description`,
                schemaPath: '#/properties/description/maxLength',
                params: {
                  limit: 256,
                },
                message: 'should NOT be longer than 256 characters',
              }];
              return false;
            }
            if (ucs2length(data1) < 1) {
              validate.errors = [{
                keyword: 'minLength',
                dataPath: `${dataPath || ''}.description`,
                schemaPath: '#/properties/description/minLength',
                params: {
                  limit: 1,
                },
                message: 'should NOT be shorter than 1 characters',
              }];
              return false;
            }
          } else {
            validate.errors = [{
              keyword: 'type',
              dataPath: `${dataPath || ''}.description`,
              schemaPath: '#/properties/description/type',
              params: {
                type: 'string',
              },
              message: 'should be string',
            }];
            return false;
          }
          var valid1 = errors === errs_1;

          if (valid1) {
            var data1 = data.clientModel;
            if (data1 === undefined) {
              valid1 = true;
            } else {
              var errs_1 = errors;
              if (typeof data1 === 'string') {
                if (ucs2length(data1) > 128) {
                  validate.errors = [{
                    keyword: 'maxLength',
                    dataPath: `${dataPath || ''}.clientModel`,
                    schemaPath: '#/properties/clientModel/maxLength',
                    params: {
                      limit: 128,
                    },
                    message: 'should NOT be longer than 128 characters',
                  }];
                  return false;
                }
              } else {
                validate.errors = [{
                  keyword: 'type',
                  dataPath: `${dataPath || ''}.clientModel`,
                  schemaPath: '#/properties/clientModel/type',
                  params: {
                    type: 'string',
                  },
                  message: 'should be string',
                }];
                return false;
              }
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              var data1 = data.clientName;
              if (data1 === undefined) {
                valid1 = true;
              } else {
                var errs_1 = errors;
                if (typeof data1 === 'string') {
                  if (ucs2length(data1) > 128) {
                    validate.errors = [{
                      keyword: 'maxLength',
                      dataPath: `${dataPath || ''}.clientName`,
                      schemaPath: '#/properties/clientName/maxLength',
                      params: {
                        limit: 128,
                      },
                      message: 'should NOT be longer than 128 characters',
                    }];
                    return false;
                  }
                } else {
                  validate.errors = [{
                    keyword: 'type',
                    dataPath: `${dataPath || ''}.clientName`,
                    schemaPath: '#/properties/clientName/type',
                    params: {
                      type: 'string',
                    },
                    message: 'should be string',
                  }];
                  return false;
                }
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                var data1 = data.note;
                if (data1 === undefined) {
                  valid1 = true;
                } else {
                  var errs_1 = errors;
                  if (typeof data1 === 'string') {
                    if (ucs2length(data1) > 512) {
                      validate.errors = [{
                        keyword: 'maxLength',
                        dataPath: `${dataPath || ''}.note`,
                        schemaPath: '#/properties/note/maxLength',
                        params: {
                          limit: 512,
                        },
                        message: 'should NOT be longer than 512 characters',
                      }];
                      return false;
                    }
                  } else {
                    validate.errors = [{
                      keyword: 'type',
                      dataPath: `${dataPath || ''}.note`,
                      schemaPath: '#/properties/note/type',
                      params: {
                        type: 'string',
                      },
                      message: 'should be string',
                    }];
                    return false;
                  }
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  var data1 = data.entries;
                  if (data1 === undefined) {
                    valid1 = false;
                    validate.errors = [{
                      keyword: 'required',
                      dataPath: `${dataPath || ''}`,
                      schemaPath: '#/required',
                      params: {
                        missingProperty: 'entries',
                      },
                      message: 'should have required property \'entries\'',
                    }];
                    return false;
                  }
                  var errs_1 = errors;
                  if (Array.isArray(data1)) {
                    if (data1.length > 5000) {
                      validate.errors = [{
                        keyword: 'maxItems',
                        dataPath: `${dataPath || ''}.entries`,
                        schemaPath: '#/properties/entries/maxItems',
                        params: {
                          limit: 5000,
                        },
                        message: 'should NOT have more than 5000 items',
                      }];
                      return false;
                    }
                    if (data1.length < 2) {
                      validate.errors = [{
                        keyword: 'minItems',
                        dataPath: `${dataPath || ''}.entries`,
                        schemaPath: '#/properties/entries/minItems',
                        params: {
                          limit: 2,
                        },
                        message: 'should NOT have fewer than 2 items',
                      }];
                      return false;
                    }
                    var errs__1 = errors;
                    var valid1;
                    for (var i1 = 0; i1 < data1.length; i1++) {
                      var data2 = data1[i1];
                      var errs_2 = errors;
                      if ((data2 && typeof data2 === 'object' && !Array.isArray(data2))) {
                        var errs__2 = errors;
                        var valid3 = true;
                        var data3 = data2.entryNo;
                        if (data3 === undefined) {
                          valid3 = true;
                        } else {
                          var errs_3 = errors;
                          if ((typeof data3 !== 'number' || (data3 % 1) || data3 !== data3)) {
                            validate.errors = [{
                              keyword: 'type',
                              dataPath: `${dataPath || ''}.entries[${i1}].entryNo`,
                              schemaPath: '#/properties/entries/items/properties/entryNo/type',
                              params: {
                                type: 'integer',
                              },
                              message: 'should be integer',
                            }];
                            return false;
                          }
                          if (typeof data3 === 'number') {
                            if (data3 < 1 || data3 !== data3) {
                              validate.errors = [{
                                keyword: 'minimum',
                                dataPath: `${dataPath || ''}.entries[${i1}].entryNo`,
                                schemaPath: '#/properties/entries/items/properties/entryNo/minimum',
                                params: {
                                  comparison: '>=',
                                  limit: 1,
                                  exclusive: false,
                                },
                                message: 'should be >= 1',
                              }];
                              return false;
                            }
                          }
                          var valid3 = errors === errs_3;
                        }
                        if (valid3) {
                          var data3 = data2.dateTime;
                          if (data3 === undefined) {
                            valid3 = true;
                          } else {
                            var errs_3 = errors;
                            if (typeof data3 === 'string') {
                              if (!pattern0.test(data3)) {
                                validate.errors = [{
                                  keyword: 'pattern',
                                  dataPath: `${dataPath || ''}.entries[${i1}].dateTime`,
                                  schemaPath: '#/properties/entries/items/properties/dateTime/pattern',
                                  params: {
                                    pattern: '^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]{3})?(?:Z|[+-][01][0-9]:[0-5][0-9])?$',
                                  },
                                  message: 'should match pattern "^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]{3})?(?:Z|[+-][01][0-9]:[0-5][0-9])?$"',
                                }];
                                return false;
                              }
                            } else {
                              validate.errors = [{
                                keyword: 'type',
                                dataPath: `${dataPath || ''}.entries[${i1}].dateTime`,
                                schemaPath: '#/properties/entries/items/properties/dateTime/type',
                                params: {
                                  type: 'string',
                                },
                                message: 'should be string',
                              }];
                              return false;
                            }
                            var valid3 = errors === errs_3;
                          }
                          if (valid3) {
                            var data3 = data2.network;
                            if (data3 === undefined) {
                              valid3 = true;
                            } else {
                              var errs_3 = errors;
                              if (typeof data3 === 'string') {
                                if (ucs2length(data3) > 128) {
                                  validate.errors = [{
                                    keyword: 'maxLength',
                                    dataPath: `${dataPath || ''}.entries[${i1}].network`,
                                    schemaPath: '#/properties/entries/items/properties/network/maxLength',
                                    params: {
                                      limit: 128,
                                    },
                                    message: 'should NOT be longer than 128 characters',
                                  }];
                                  return false;
                                }
                              } else {
                                validate.errors = [{
                                  keyword: 'type',
                                  dataPath: `${dataPath || ''}.entries[${i1}].network`,
                                  schemaPath: '#/properties/entries/items/properties/network/type',
                                  params: {
                                    type: 'string',
                                  },
                                  message: 'should be string',
                                }];
                                return false;
                              }
                              var valid3 = errors === errs_3;
                            }
                            if (valid3) {
                              var data3 = data2.dlBw;
                              if (data3 === undefined) {
                                valid3 = true;
                              } else {
                                var errs_3 = errors;
                                if ((typeof data3 !== 'number' || (data3 % 1) || data3 !== data3)) {
                                  validate.errors = [{
                                    keyword: 'type',
                                    dataPath: `${dataPath || ''}.entries[${i1}].dlBw`,
                                    schemaPath: '#/properties/entries/items/properties/dlBw/type',
                                    params: {
                                      type: 'integer',
                                    },
                                    message: 'should be integer',
                                  }];
                                  return false;
                                }
                                if (typeof data3 === 'number') {
                                  if (data3 < 0 || data3 !== data3) {
                                    validate.errors = [{
                                      keyword: 'minimum',
                                      dataPath: `${dataPath || ''}.entries[${i1}].dlBw`,
                                      schemaPath: '#/properties/entries/items/properties/dlBw/minimum',
                                      params: {
                                        comparison: '>=',
                                        limit: 0,
                                        exclusive: false,
                                      },
                                      message: 'should be >= 0',
                                    }];
                                    return false;
                                  }
                                }
                                var valid3 = errors === errs_3;
                              }
                              if (valid3) {
                                var data3 = data2.dlLatency;
                                if (data3 === undefined) {
                                  valid3 = true;
                                } else {
                                  var errs_3 = errors;
                                  if ((typeof data3 !== 'number' || (data3 % 1) || data3 !== data3)) {
                                    validate.errors = [{
                                      keyword: 'type',
                                      dataPath: `${dataPath || ''}.entries[${i1}].dlLatency`,
                                      schemaPath: '#/properties/entries/items/properties/dlLatency/type',
                                      params: {
                                        type: 'integer',
                                      },
                                      message: 'should be integer',
                                    }];
                                    return false;
                                  }
                                  if (typeof data3 === 'number') {
                                    if (data3 < 0 || data3 !== data3) {
                                      validate.errors = [{
                                        keyword: 'minimum',
                                        dataPath: `${dataPath || ''}.entries[${i1}].dlLatency`,
                                        schemaPath: '#/properties/entries/items/properties/dlLatency/minimum',
                                        params: {
                                          comparison: '>=',
                                          limit: 0,
                                          exclusive: false,
                                        },
                                        message: 'should be >= 0',
                                      }];
                                      return false;
                                    }
                                  }
                                  var valid3 = errors === errs_3;
                                }
                                if (valid3) {
                                  var data3 = data2.ulBw;
                                  if (data3 === undefined) {
                                    valid3 = true;
                                  } else {
                                    var errs_3 = errors;
                                    if ((typeof data3 !== 'number' || (data3 % 1) || data3 !== data3)) {
                                      validate.errors = [{
                                        keyword: 'type',
                                        dataPath: `${dataPath || ''}.entries[${i1}].ulBw`,
                                        schemaPath: '#/properties/entries/items/properties/ulBw/type',
                                        params: {
                                          type: 'integer',
                                        },
                                        message: 'should be integer',
                                      }];
                                      return false;
                                    }
                                    if (typeof data3 === 'number') {
                                      if (data3 < 0 || data3 !== data3) {
                                        validate.errors = [{
                                          keyword: 'minimum',
                                          dataPath: `${dataPath || ''}.entries[${i1}].ulBw`,
                                          schemaPath: '#/properties/entries/items/properties/ulBw/minimum',
                                          params: {
                                            comparison: '>=',
                                            limit: 0,
                                            exclusive: false,
                                          },
                                          message: 'should be >= 0',
                                        }];
                                        return false;
                                      }
                                    }
                                    var valid3 = errors === errs_3;
                                  }
                                  if (valid3) {
                                    var data3 = data2.ulLatency;
                                    if (data3 === undefined) {
                                      valid3 = true;
                                    } else {
                                      var errs_3 = errors;
                                      if ((typeof data3 !== 'number' || (data3 % 1) || data3 !== data3)) {
                                        validate.errors = [{
                                          keyword: 'type',
                                          dataPath: `${dataPath || ''}.entries[${i1}].ulLatency`,
                                          schemaPath: '#/properties/entries/items/properties/ulLatency/type',
                                          params: {
                                            type: 'integer',
                                          },
                                          message: 'should be integer',
                                        }];
                                        return false;
                                      }
                                      if (typeof data3 === 'number') {
                                        if (data3 < 0 || data3 !== data3) {
                                          validate.errors = [{
                                            keyword: 'minimum',
                                            dataPath: `${dataPath || ''}.entries[${i1}].ulLatency`,
                                            schemaPath: '#/properties/entries/items/properties/ulLatency/minimum',
                                            params: {
                                              comparison: '>=',
                                              limit: 0,
                                              exclusive: false,
                                            },
                                            message: 'should be >= 0',
                                          }];
                                          return false;
                                        }
                                      }
                                      var valid3 = errors === errs_3;
                                    }
                                    if (valid3) {
                                      var data3 = data2.gpsCoordinates;
                                      if (data3 === undefined) {
                                        valid3 = true;
                                      } else {
                                        var errs_3 = errors;
                                        if ((data3 && typeof data3 === 'object' && !Array.isArray(data3))) {
                                          if (true) {
                                            const errs__3 = errors;
                                            var valid4 = true;
                                            if (data3.latitude === undefined) {
                                              valid4 = false;
                                              validate.errors = [{
                                                keyword: 'required',
                                                dataPath: `${dataPath || ''}.entries[${i1}].gpsCoordinates`,
                                                schemaPath: '#/properties/entries/items/properties/gpsCoordinates/required',
                                                params: {
                                                  missingProperty: 'latitude',
                                                },
                                                message: 'should have required property \'latitude\'',
                                              }];
                                              return false;
                                            }
                                            var errs_4 = errors;
                                            if (typeof data3.latitude !== 'number') {
                                              validate.errors = [{
                                                keyword: 'type',
                                                dataPath: `${dataPath || ''}.entries[${i1}].gpsCoordinates.latitude`,
                                                schemaPath: '#/properties/entries/items/properties/gpsCoordinates/properties/latitude/type',
                                                params: {
                                                  type: 'number',
                                                },
                                                message: 'should be number',
                                              }];
                                              return false;
                                            }
                                            var valid4 = errors === errs_4;

                                            if (valid4) {
                                              if (data3.longitude === undefined) {
                                                valid4 = false;
                                                validate.errors = [{
                                                  keyword: 'required',
                                                  dataPath: `${dataPath || ''}.entries[${i1}].gpsCoordinates`,
                                                  schemaPath: '#/properties/entries/items/properties/gpsCoordinates/required',
                                                  params: {
                                                    missingProperty: 'longitude',
                                                  },
                                                  message: 'should have required property \'longitude\'',
                                                }];
                                                return false;
                                              }
                                              var errs_4 = errors;
                                              if (typeof data3.longitude !== 'number') {
                                                validate.errors = [{
                                                  keyword: 'type',
                                                  dataPath: `${dataPath || ''}.entries[${i1}].gpsCoordinates.longitude`,
                                                  schemaPath: '#/properties/entries/items/properties/gpsCoordinates/properties/longitude/type',
                                                  params: {
                                                    type: 'number',
                                                  },
                                                  message: 'should be number',
                                                }];
                                                return false;
                                              }
                                              var valid4 = errors === errs_4;
                                            }
                                          }
                                        } else {
                                          validate.errors = [{
                                            keyword: 'type',
                                            dataPath: `${dataPath || ''}.entries[${i1}].gpsCoordinates`,
                                            schemaPath: '#/properties/entries/items/properties/gpsCoordinates/type',
                                            params: {
                                              type: 'object',
                                            },
                                            message: 'should be object',
                                          }];
                                          return false;
                                        }
                                        var valid3 = errors === errs_3;
                                      }
                                      if (valid3) {
                                        var data3 = data2.note;
                                        if (data3 === undefined) {
                                          valid3 = true;
                                        } else {
                                          var errs_3 = errors;
                                          if (typeof data3 === 'string') {
                                            if (ucs2length(data3) > 512) {
                                              validate.errors = [{
                                                keyword: 'maxLength',
                                                dataPath: `${dataPath || ''}.entries[${i1}].note`,
                                                schemaPath: '#/properties/entries/items/properties/note/maxLength',
                                                params: {
                                                  limit: 512,
                                                },
                                                message: 'should NOT be longer than 512 characters',
                                              }];
                                              return false;
                                            }
                                          } else {
                                            validate.errors = [{
                                              keyword: 'type',
                                              dataPath: `${dataPath || ''}.entries[${i1}].note`,
                                              schemaPath: '#/properties/entries/items/properties/note/type',
                                              params: {
                                                type: 'string',
                                              },
                                              message: 'should be string',
                                            }];
                                            return false;
                                          }
                                          var valid3 = errors === errs_3;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      } else {
                        validate.errors = [{
                          keyword: 'type',
                          dataPath: `${dataPath || ''}.entries[${i1}]`,
                          schemaPath: '#/properties/entries/items/type',
                          params: {
                            type: 'object',
                          },
                          message: 'should be object',
                        }];
                        return false;
                      }
                      if (errors === errs_2) {
                        var errs__2 = errors;
                        var valid2 = false;
                        var errs_3 = errors;
                        if ((data2 && typeof data2 === 'object' && !Array.isArray(data2))) {
                          var missing3;
                          if (((data2.entryNo === undefined) && (missing3 = '.entryNo')) || ((data2.dateTime === undefined) && (missing3 = '.dateTime')) || ((data2.dlBw === undefined) && (missing3 = '.dlBw'))) {
                            var err = {
                              keyword: 'required',
                              dataPath: `${dataPath || ''}.entries[${i1}]`,
                              schemaPath: '#/properties/entries/items/anyOf/0/required',
                              params: {
                                missingProperty: `${missing3}`,
                              },
                              message: `should have required property '${missing3}'`,
                            };
                            if (vErrors === null) vErrors = [err];
                            else vErrors.push(err);
                            errors++;
                          }
                        }
                        var valid3 = errors === errs_3;
                        valid2 = valid2 || valid3;
                        if (!valid2) {
                          var errs_3 = errors;
                          if ((data2 && typeof data2 === 'object' && !Array.isArray(data2))) {
                            var missing3;
                            if (((data2.entryNo === undefined) && (missing3 = '.entryNo')) || ((data2.dateTime === undefined) && (missing3 = '.dateTime')) || ((data2.ulBw === undefined) && (missing3 = '.ulBw'))) {
                              var err = {
                                keyword: 'required',
                                dataPath: `${dataPath || ''}.entries[${i1}]`,
                                schemaPath: '#/properties/entries/items/anyOf/1/required',
                                params: {
                                  missingProperty: `${missing3}`,
                                },
                                message: `should have required property '${missing3}'`,
                              };
                              if (vErrors === null) vErrors = [err];
                              else vErrors.push(err);
                              errors++;
                            }
                          }
                          var valid3 = errors === errs_3;
                          valid2 = valid2 || valid3;
                          if (!valid2) {
                            var errs_3 = errors;
                            if ((data2 && typeof data2 === 'object' && !Array.isArray(data2))) {
                              var missing3;
                              if (((data2.entryNo === undefined) && (missing3 = '.entryNo')) || ((data2.dateTime === undefined) && (missing3 = '.dateTime')) || ((data2.gpsCoordinates === undefined) && (missing3 = '.gpsCoordinates'))) {
                                var err = {
                                  keyword: 'required',
                                  dataPath: `${dataPath || ''}.entries[${i1}]`,
                                  schemaPath: '#/properties/entries/items/anyOf/2/required',
                                  params: {
                                    missingProperty: `${missing3}`,
                                  },
                                  message: `should have required property '${missing3}'`,
                                };
                                if (vErrors === null) vErrors = [err];
                                else vErrors.push(err);
                                errors++;
                              }
                            }
                            var valid3 = errors === errs_3;
                            valid2 = valid2 || valid3;
                          }
                        }
                        if (!valid2) {
                          var err = {
                            keyword: 'anyOf',
                            dataPath: `${dataPath || ''}.entries[${i1}]`,
                            schemaPath: '#/properties/entries/items/anyOf',
                            params: {},
                            message: 'should match some schema in anyOf',
                          };
                          if (vErrors === null) vErrors = [err];
                          else vErrors.push(err);
                          errors++;
                          validate.errors = vErrors;
                          return false;
                        }
                        errors = errs__2;
                        if (vErrors !== null) {
                          if (errs__2) vErrors.length = errs__2;
                          else vErrors = null;
                        }
                      }
                      var valid2 = errors === errs_2;
                      if (!valid2) break;
                    }
                    if (errs__1 == errors) {
                      var errs__1 = errors;
                      var valid1;
                      var valid2 = false;
                      for (var i1 = 0; i1 < data1.length; i1++) {
                        var data2 = data1[i1];
                        var errs_2 = errors;
                        if ((!data2 || typeof data2 !== 'object' || Array.isArray(data2))) {
                          var err = {
                            keyword: 'type',
                            dataPath: `${dataPath || ''}.entries[${i1}]`,
                            schemaPath: '#/properties/entries/contains/type',
                            params: {
                              type: 'object',
                            },
                            message: 'should be object',
                          };
                          if (vErrors === null) vErrors = [err];
                          else vErrors.push(err);
                          errors++;
                        }
                        var valid2 = errors === errs_2;
                        if (valid2) break;
                      }
                      if (!valid2) {
                        validate.errors = [{
                          keyword: 'contains',
                          dataPath: `${dataPath || ''}.entries`,
                          schemaPath: '#/properties/entries/contains',
                          params: {},
                          message: 'should contain a valid item',
                        }];
                        return false;
                      }
                      errors = errs__1;
                      if (vErrors !== null) {
                        if (errs__1) vErrors.length = errs__1;
                        else vErrors = null;
                      }
                      let i = data1.length;
                      var valid1 = true;
                      let j;
                      if (i > 1) {
                        outer: for (; i--;) {
                          for (j = i; j--;) {
                            if (equal(data1[i], data1[j])) {
                              valid1 = false;
                              break outer;
                            }
                          }
                        }
                      }
                      if (!valid1) {
                        validate.errors = [{
                          keyword: 'uniqueItems',
                          dataPath: `${dataPath || ''}.entries`,
                          schemaPath: '#/properties/entries/uniqueItems',
                          params: {
                            i,
                            j,
                          },
                          message: `should NOT have duplicate items (items ## ${j} and ${i} are identical)`,
                        }];
                        return false;
                      }
                    }
                  } else {
                    validate.errors = [{
                      keyword: 'type',
                      dataPath: `${dataPath || ''}.entries`,
                      schemaPath: '#/properties/entries/type',
                      params: {
                        type: 'array',
                      },
                      message: 'should be array',
                    }];
                    return false;
                  }
                  var valid1 = errors === errs_1;
                }
              }
            }
          }
        }
      }
    } else {
      validate.errors = [{
        keyword: 'type',
        dataPath: `${dataPath || ''}`,
        schemaPath: '#/type',
        params: {
          type: 'object',
        },
        message: 'should be object',
      }];
      return false;
    }
    validate.errors = vErrors;
    return errors === 0;
  };
}());
validate.schema = {
  $schema: 'http://json-schema.org/draft-07/schema#',
  $id: 'http://example.com/product.schema.json',
  title: 'LPP trace schema',
  description: 'Link Performance Prediction trace file schema',
  type: 'object',
  properties: {
    version: {
      description: 'Format version',
      type: 'integer',
      enum: [1],
    },
    description: {
      description: 'Trace description (e.g. "From Stockholm to Szczecin")',
      type: 'string',
      minLength: 1,
      maxLength: 256,
    },
    clientModel: {
      description: 'Client model (e.g. "SM-G390")',
      type: 'string',
      maxLength: 128,
    },
    clientName: {
      description: 'Client name (e.g. "Samsung Galaxy S10")',
      type: 'string',
      maxLength: 128,
    },
    note: {
      description: 'additional description',
      type: 'string',
      maxLength: 512,
    },
    entries: {
      description: 'Trace entries',
      type: 'array',
      uniqueItems: true,
      contains: {
        type: 'object',
      },
      minItems: 2,
      maxItems: 5000,
      items: {
        type: 'object',
        properties: {
          entryNo: {
            description: 'Trace entry number in ascending order',
            type: 'integer',
            minimum: 1,
          },
          dateTime: {
            description: 'UTC timestamp in format "YYYY-MM-DDThh:mm:ssTZD" according to ISO 8601',
            type: 'string',
            pattern: '^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]{3})?(?:Z|[+-][01][0-9]:[0-5][0-9])?$',
          },
          network: {
            description: 'Network operator name or the numeric name (MCC+MNC)',
            type: 'string',
            maxLength: 128,
          },
          dlBw: {
            description: 'Downlink bandwidth in kpbs',
            type: 'integer',
            minimum: 0,
          },
          dlLatency: {
            description: 'Downlink latency to first bytes in microseconds',
            type: 'integer',
            minimum: 0,
          },
          ulBw: {
            description: 'Uplink bandwidth in kpbs',
            type: 'integer',
            minimum: 0,
          },
          ulLatency: {
            description: 'Uplink latency to first bytes in microseconds',
            type: 'integer',
            minimum: 0,
          },
          gpsCoordinates: {
            description: 'A geographical coordinate',
            type: 'object',
            properties: {
              latitude: {
                description: 'GPS latitude in decimal degrees (DD) in WGS-84 format',
                type: 'number',
              },
              longitude: {
                description: 'GPS longitude in decimal degrees (DD) in WGS-84 format',
                type: 'number',
              },
            },
            required: ['latitude', 'longitude'],
          },
          note: {
            description: 'Additional description',
            type: 'string',
            maxLength: 512,
          },
        },
        anyOf: [{
          required: ['entryNo', 'dateTime', 'dlBw'],
        }, {
          required: ['entryNo', 'dateTime', 'ulBw'],
        }, {
          required: ['entryNo', 'dateTime', 'gpsCoordinates'],
        }],
      },
    },
  },
  required: ['version', 'description', 'entries'],
};
